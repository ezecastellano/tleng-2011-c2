/* Grep line.  */


%{
#include "automata.hpp"
#include "define.hpp"
#include "debugging.hpp"
%}

%token ALFANUM


%% /* Grammar rules and actions follow.  
    * Bison supplies a default action for each rule: $$ = $1. */

input: expression       { automata = $1; guardar($1, "5Final");}

expression: term             {guardar($1, "3term"); $$ = $1; cout << "Paso b" << endl;}
    | term expression        { $$ = $1; $$ += $2;  }
    | term '|' expression    { $$ = $1; $$ |= $3; guardar($1, "3pri"); guardar($3, "4seg"); cout << "paso |" << endl;}
;
    
term: term '+'          { $$ = $1.apply_op('+');}
    | term '?'          { $$ = $1.apply_op('?');}
    | term '*'          { $$ = $1.apply_op('*'); }
    | operand           { $$ = $1; guardar($$, "2Operand");}
;

operand: parenthesis    
    | character   { guardar($1, "1Char"); $$ = $1;}       
;

character: ALFANUM      
    | '.'               { $$ = Automata('.'); }
;

parenthesis: '(' expression ')'
;



%%
     

